openapi: 3.0.0
info:
  title: Stop de Ontkoking API
  description: API for the Stop de Ontkoking application which provides recipe and user management functionality
  version: 1.0.0
  contact:
    name: Stop de Ontkoking Team
servers:
  - url: http://localhost:3000
    description: Local development server
  - url: https://stop-de-ontkoking.example.com
    description: Production server

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: auth_token
    refreshToken:
      type: apiKey
      in: cookie
      name: refresh_token

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        created_at:
          type: string
          format: date-time
          example: "2025-09-28T12:00:00.000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-09-28T12:00:00.000Z"
      required:
        - id
        - name
        - email
        - role

    UserInput:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "securePassword123"
      required:
        - name
        - email
        - password

    UserUpdateInput:
      type: object
      properties:
        name:
          type: string
          example: "Updated Name"
        email:
          type: string
          format: email
          example: "updated.email@example.com"
        password:
          type: string
          format: password
          example: "newPassword123"
        current_password:
          type: string
          format: password
          example: "oldPassword123"

    LoginInput:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "securePassword123"
      required:
        - email
        - password

    Recipe:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "b5f8dbb7-4b2f-4187-9eff-2b9239b8d9a1"
        owner_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Spaghetti Carbonara"
        description:
          type: string
          example: "A classic Italian pasta dish with eggs, cheese, pancetta, and black pepper"
        ingredients:
          type: array
          items:
            type: string
          example:
            [
              "spaghetti",
              "eggs",
              "pancetta",
              "parmesan cheese",
              "black pepper",
              "salt",
            ]
        meal_type:
          type: string
          enum: [breakfast, lunch, dinner, snack, dessert, drink]
          example: "dinner"
        preparation_time:
          type: integer
          example: 15
        cooking_time:
          type: integer
          example: 20
        servings:
          type: integer
          example: 4
        instructions:
          type: array
          items:
            type: string
          example:
            [
              "Boil water and cook pasta",
              "Mix eggs and cheese",
              "Fry pancetta",
              "Combine all ingredients",
            ]
        created_at:
          type: string
          format: date-time
          example: "2025-09-20T12:00:00.000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-09-20T12:00:00.000Z"
      required:
        - id
        - owner_id
        - name
        - description
        - meal_type

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
      required:
        - success

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "An error occurred"
        errors:
          type: object
          additionalProperties:
            type: string
          example:
            email: "Email is already in use"
            password: "Password must be at least 8 characters"
      required:
        - success

paths:
  /api/auth/signup:
    post:
      summary: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "User created successfully"
                      user:
                        $ref: "#/components/schemas/User"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/login:
    post:
      summary: Authenticate a user and receive an authentication token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Login successful"
                      user:
                        $ref: "#/components/schemas/User"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "auth_token=xxx; HttpOnly; Path=/; Max-Age=604800; SameSite=Strict"
        "401":
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/logout:
    post:
      summary: Log out the current user by clearing authentication cookies
      tags:
        - Authentication
      responses:
        "200":
          description: Logged out successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "auth_token=; HttpOnly; Path=/; Max-Age=0; SameSite=Strict"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/refresh:
    post:
      summary: Refresh an expired authentication token
      tags:
        - Authentication
      security:
        - refreshToken: []
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "auth_token=xxx; HttpOnly; Path=/; Max-Age=604800; SameSite=Strict"
        "401":
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/me:
    get:
      summary: Retrieve the current user's profile information
      tags:
        - User Profile
      security:
        - cookieAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      summary: Update the current user's profile information
      tags:
        - User Profile
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateInput"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Profile updated successfully"
                      user:
                        $ref: "#/components/schemas/User"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/recipes/search:
    get:
      summary: Search for recipes by ingredients and meal type
      tags:
        - Recipes
      parameters:
        - name: ingredients
          in: query
          description: Ingredients to search for (partial match)
          required: false
          schema:
            type: string
          example: "chicken"
        - name: meal_type
          in: query
          description: Meal type to filter by
          required: false
          schema:
            type: string
            enum: [breakfast, lunch, dinner, snack, dessert, drink]
          example: "dinner"
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: limit
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          example: 10
      responses:
        "200":
          description: Recipes retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          recipes:
                            type: array
                            items:
                              $ref: "#/components/schemas/Recipe"
                          total:
                            type: integer
                            example: 45
                          page:
                            type: integer
                            example: 1
                          limit:
                            type: integer
                            example: 10
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
